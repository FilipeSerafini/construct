name: deploy-aws
on: [push]

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Terraform Apply
        run: |
          cd ./infra/terraform-seller
          terraform init
          terraform plan
          terraform apply -auto-approve

      - name: Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DHUB_USERNAME }}
          password: ${{ secrets.DHUB_PASSWORD }}

      - name: Build Docker image
        run: docker build . -t ${{ secrets.DHUB_USERNAME }}/seller-api:latest

      - name: Push Docker image
        run: docker push ${{ secrets.DHUB_USERNAME }}/seller-api:latest

      - name: Get EC2 IP Address
        id: ec2
        run: |
          INSTANCE_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=SellerInstance" \
            --query "Reservations[*].Instances[*].PrivateIpAddress" \
            --output text)
          echo "::set-output name=instance_ip::$INSTANCE_IP"

      - name: Create SSH Key File
        run: |
          echo "${{ secrets.PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      - name: Install Docker on EC2 and Run Container
        run: |
          ssh -o StrictHostKeyChecking=no -i private_key.pem ec2-user@${{ steps.ec2.outputs.instance_ip }} << 'EOF'
            sudo yum update -y
            sudo amazon-linux-extras install docker -y
            sudo service docker start
            sudo usermod -a -G docker ec2-user
            docker login -u ${{ secrets.DHUB_USERNAME }} -p ${{ secrets.DHUB_PASSWORD }}
            docker pull ${{ secrets.DHUB_USERNAME }}/seller-api:latest
            docker run -d --name seller-api -p 80:80 ${{ secrets.DHUB_USERNAME }}/seller-api:latest
          EOF
